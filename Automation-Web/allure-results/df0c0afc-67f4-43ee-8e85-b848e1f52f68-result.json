{"name": "test_register_and_login", "status": "broken", "statusDetails": {"message": "TypeError: Object of type LoginPage is not JSON serializable", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3087d7ef37dacc6a266916691431b83\")>\n\n    def test_register_and_login(driver):\n        register_page = RegisterPage(driver)\n        register_page.navigate()\n    \n        driver.execute_script(\"arguments[0].scrollIntoView(true);\", driver.find_element(*register_page.REGISTER_BUTTON))\n        first_name = \"Victor\"\n        last_name = \"Oliveira\"\n        user_name = \"victolvrr\"\n        password = \"Victor123!\"\n        register_page.fill_form(first_name, last_name, user_name, password)\n    \n        time.sleep(15)\n        register_page.wait_for_captcha()\n        register_page.click_register()\n    \n        login_page = LoginPage(driver)\n        login_page.navigate()\n>       driver.execute_script(\"arguments[0].scrollIntoView(true);\", login_page)\n\ntests/test_login.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:455: in execute\n    response = cast(RemoteConnection, self.command_executor).execute(driver_command, params)\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py:402: in execute\n    data = utils.dump_json(params)\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/utils.py:23: in dump_json\n    return json.dumps(json_struct)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x109107a00>, o = <pages.login_pages.LoginPage object at 0x10a3f0dc0>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type LoginPage is not JSON serializable\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/encoder.py:179: TypeError"}, "attachments": [{"name": "stdout", "source": "b5e57ccf-6283-4cce-8a6c-6d7b6bda421a-attachment.txt", "type": "text/plain"}], "start": 1759235940093, "stop": 1759235967608, "uuid": "8894df84-c999-41b6-b04c-01775969b4d9", "historyId": "250d75a20d190e00955083a78efde06d", "testCaseId": "250d75a20d190e00955083a78efde06d", "fullName": "tests.test_login#test_register_and_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "EU3146030016220.local"}, {"name": "thread", "value": "50156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py"]}