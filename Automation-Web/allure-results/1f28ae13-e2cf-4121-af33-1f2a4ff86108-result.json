{"name": "test_simple_alert", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //span[text( )='Alerts\"] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[text( )='Alerts\"]' is not a valid XPath expression.\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidselectorexception\nStacktrace:\n0   chromedriver                        0x000000010b466f08 chromedriver + 5934856\n1   chromedriver                        0x000000010b45ec9a chromedriver + 5901466\n2   chromedriver                        0x000000010af2aade chromedriver + 445150\n3   chromedriver                        0x000000010af31d9c chromedriver + 474524\n4   chromedriver                        0x000000010af346d8 chromedriver + 485080\n5   chromedriver                        0x000000010af347a4 chromedriver + 485284\n6   chromedriver                        0x000000010af803c1 chromedriver + 795585\n7   chromedriver                        0x000000010af80e51 chromedriver + 798289\n8   chromedriver                        0x000000010afd1184 chromedriver + 1126788\n9   chromedriver                        0x000000010afa875d chromedriver + 960349\n10  chromedriver                        0x000000010afce0e1 chromedriver + 1114337\n11  chromedriver                        0x000000010afa8503 chromedriver + 959747\n12  chromedriver                        0x000000010af71731 chromedriver + 735025\n13  chromedriver                        0x000000010af72ee1 chromedriver + 741089\n14  chromedriver                        0x000000010b430360 chromedriver + 5710688\n15  chromedriver                        0x000000010b432c00 chromedriver + 5721088\n16  chromedriver                        0x000000010b43277b chromedriver + 5719931\n17  chromedriver                        0x000000010b4330a5 chromedriver + 5722277\n18  chromedriver                        0x000000010b415e97 chromedriver + 5602967\n19  chromedriver                        0x000000010b433372 chromedriver + 5722994\n20  chromedriver                        0x000000010b409584 chromedriver + 5551492\n21  chromedriver                        0x000000010b44ed28 chromedriver + 5836072\n22  chromedriver                        0x000000010b44ee85 chromedriver + 5836421\n23  chromedriver                        0x000000010b45e823 chromedriver + 5900323\n24  libsystem_pthread.dylib             0x00007ff81aad4e59 _pthread_start + 115\n25  libsystem_pthread.dylib             0x00007ff81aad0857 thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"63a324e52bb6d0e45778ff8001036f43\")>\n\n    @pytest.fixture(scope=\"function\")\n    def setup_alerts_page(driver):\n        home_page = HomePage(driver)\n        home_page.navigate()\n        # CORREÇÃO: Removido o 's' extra de 'alerts' para corresponder ao nome do método\n        home_page.click_alert_frame_windows_card()\n    \n        alerts_frames_windows_page = AlertsFramesWindowsPage(driver)\n>       alerts_frames_windows_page.click_alerts_menu_item()\n\ntests/test_alert.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/alert_pages.py:29: in click_alerts_menu_item\n    self.driver.find_element(*self.alerts_menu_item).click()\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103336ee0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...ff81aad4e59 _pthread_start + 115\\\\n25  libsystem_pthread.dylib             0x00007ff81aad0857 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //span[text( )='Alerts\"] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[text( )='Alerts\"]' is not a valid XPath expression.\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidselectorexception\nE       Stacktrace:\nE       0   chromedriver                        0x000000010b466f08 chromedriver + 5934856\nE       1   chromedriver                        0x000000010b45ec9a chromedriver + 5901466\nE       2   chromedriver                        0x000000010af2aade chromedriver + 445150\nE       3   chromedriver                        0x000000010af31d9c chromedriver + 474524\nE       4   chromedriver                        0x000000010af346d8 chromedriver + 485080\nE       5   chromedriver                        0x000000010af347a4 chromedriver + 485284\nE       6   chromedriver                        0x000000010af803c1 chromedriver + 795585\nE       7   chromedriver                        0x000000010af80e51 chromedriver + 798289\nE       8   chromedriver                        0x000000010afd1184 chromedriver + 1126788\nE       9   chromedriver                        0x000000010afa875d chromedriver + 960349\nE       10  chromedriver                        0x000000010afce0e1 chromedriver + 1114337\nE       11  chromedriver                        0x000000010afa8503 chromedriver + 959747\nE       12  chromedriver                        0x000000010af71731 chromedriver + 735025\nE       13  chromedriver                        0x000000010af72ee1 chromedriver + 741089\nE       14  chromedriver                        0x000000010b430360 chromedriver + 5710688\nE       15  chromedriver                        0x000000010b432c00 chromedriver + 5721088\nE       16  chromedriver                        0x000000010b43277b chromedriver + 5719931\nE       17  chromedriver                        0x000000010b4330a5 chromedriver + 5722277\nE       18  chromedriver                        0x000000010b415e97 chromedriver + 5602967\nE       19  chromedriver                        0x000000010b433372 chromedriver + 5722994\nE       20  chromedriver                        0x000000010b409584 chromedriver + 5551492\nE       21  chromedriver                        0x000000010b44ed28 chromedriver + 5836072\nE       22  chromedriver                        0x000000010b44ee85 chromedriver + 5836421\nE       23  chromedriver                        0x000000010b45e823 chromedriver + 5900323\nE       24  libsystem_pthread.dylib             0x00007ff81aad4e59 _pthread_start + 115\nE       25  libsystem_pthread.dylib             0x00007ff81aad0857 thread_start + 15\n\nmyproject/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSelectorException"}, "attachments": [{"name": "stdout", "source": "4771fd7b-9577-4281-8d04-db7cb8c01836-attachment.txt", "type": "text/plain"}], "start": 1759155841881, "stop": 1759155841881, "uuid": "b288d9d7-eb4f-4f2a-b216-a86d117a6500", "historyId": "ce08201a5d96b9c15dfa28fee621a5df", "testCaseId": "ce08201a5d96b9c15dfa28fee621a5df", "fullName": "tests.test_alert#test_simple_alert", "labels": [{"name": "tag", "value": "alerts"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_alert"}, {"name": "host", "value": "EU3146030016220.local"}, {"name": "thread", "value": "41657-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_alert"}], "titlePath": ["tests", "test_alert.py"]}